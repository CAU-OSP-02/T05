import cv2
import numpy as np
import math
from PIL import Image

#전역변수선언 
result = 1
score = 0

#함수선언
def finger_one():
    global result
    return result

def my_score():
    global score
    global result
    if result == myanswer:
        score += 10
        result += 1
          

image = cv2.imread("image01.jpg",cv2.IMREAD_ANYCOLOR)
cv2.imshow("question",image)

#capturing the video 
cap = cv2.VideoCapture(0)

finger_one()


while(True):
             
    __,img=cap.read()
    img=cv2.flip(img,1)


    #making the img of dimension
    img =img[100:700,100:700]
        
    #using hsv we detect the color of skin
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    lower_skin = np.array([0, 58, 30], dtype = "uint8")
    upper_skin = np.array([33, 255, 255], dtype = "uint8")
        
    #applying mask to extract skin color object from the img
    mask = cv2.inRange(hsv, lower_skin, upper_skin)

    #now we dilate our skin color object to remove black spots or noise from it
    kernel = np.ones((5,5),np.uint8)
    mask = cv2.dilate(mask,kernel,iterations = 3)
    blur = cv2.bilateralFilter(mask,9,200,200)
    res = cv2.bitwise_and(img, img, mask= blur)

    #convert to BGR -> GRAY 
    img_gray = cv2.cvtColor(res,cv2.COLOR_BGR2GRAY)

    #thresholding the image
    __, thresh = cv2.threshold(img_gray, 98, 255,cv2.THRESH_TRUNC)
      
    #finding contours in the threshold image
    contours,_ = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)

    #selecting the contour of max area 
    cnt = max(contours, key = lambda x: cv2.contourArea(x))
       
    hull = cv2.convexHull(cnt)
    hullarea = cv2.contourArea(hull)
    cntarea = cv2.contourArea(cnt)
    x,y,w,h = cv2.boundingRect(hull)
    img = cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),2)

    ratio=(hullarea+cntarea)/(hullarea-cntarea)
    print("ratio:",ratio)
    img = cv2.drawContours(img, hull, -2, (0,0,255), 10)
      
    if len(contours) > 0:
        hull = cv2.convexHull(cnt, returnPoints=False)
        defects = cv2.convexityDefects(cnt, hull)
        count_defects = 0
                        
        for i in range(defects.shape[0]):
            s,e,f,d = defects[i,0]
            start = tuple(cnt[s][0])
            end = tuple(cnt[e][0])
            far = tuple(cnt[f][0])
            a = math.sqrt((end[0] - start[0])**2 + (end[1] - start[1])**2)
            b = math.sqrt((far[0] - start[0])**2 + (far[1] - start[1])**2)
            c = math.sqrt((end[0] - far[0])**2 + (end[1] - far[1])**2)
            #find the angles between the sides of triangle
            angle = math.acos((b**2 + c**2 - a**2)/(2*b*c)) * 57.295
            if angle <= 90:
                count_defects += 1

            cv2.circle(img,far,5,[0,0,255],-1)
            cv2.line(img,start,end,[255,0,0],2)

    # hand gestures and display the result 
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(img, 'score :' , (50,50), font, 2, (255,255,255), 4, cv2.LINE_AA)
        cv2.putText(img, str(score), (300,50), font, 2, (255,255,255), 4, cv2.LINE_AA) 
            
            

        if count_defects == 0 :
            if ratio<19: #Gesture 1
                myanswer = 1
                my_score()
                    
                
            elif ratio>15 and ratio<21: #Gesture 6
                myanswer = 6
                my_score()
            elif ratio>25:
                if ratio<33: #Gesture 0
                    myanswer = 0
                    my_score()
                else: #Gesture 9
                    myanswer = 9
                    my_score()
            
                    

        elif count_defects == 1 :
            if ratio<13: #Gesture 2
                myanswer = 2
                my_score()
                        
                    
            elif ratio >11 : #Gesture 7
                myanswer = 7
                my_score()

        elif count_defects == 2:
            if ratio<10: #Gesture 8
                myanswer = 8
                my_score()

            elif ratio>13: #Gesture 3
                myanswer = 3
                my_score()
        
        elif count_defects == 3: #Gesture 4
                myanswer = 4
                my_score()

        elif count_defects == 4: #Gesture 5
                myanswer = 5
                my_score()
        
        cv2.imshow('img',img)
cap.release()
cv2.destroyAllWindows()    

